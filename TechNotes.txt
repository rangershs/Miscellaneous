critical section object & mutex
    临界区对象一般是非内核对象(用户空间)，不会进行上下文切换；互斥量是内核对象，CPU会进行上下文切换(用户态<->内核态)
    临界区对象只能在同一进程的线程间互斥访问资源；互斥量可以在进程/线程间互斥访问资源
    临界区对象仅在Win系统上，互斥量可以在不同平台上使用(std::mutex)
    临界区对象的线程终止后，临界区对象的状态未定，其他线程可能无法进入临界区；互斥量的线程/进程终止后会让出互斥量的控制权，其他线程/进程可以获取互斥量
    
exception
    抛出的异常没有被捕获处理，程序将调用标准函数terminate终止
    异常发生后栈展开过程中调用链上的对象被自动销毁
    析构函数不应该抛出不能被它自身处理的异常
    异常对象必须是完全类型，若是类类型，必须包含一个可访问的析构函数和拷贝构造函数
    异常对象位于由编译器管理的空间中，异常处理完毕后，异常对象才被销毁
    异常对象的类型是静态编译时的类型，多态情况下是基类指针/引用的类型，而非派生类的类型

noexcept
    确认函数不会抛出异常；或不知道如何处理异常时使用
    函数声明和函数定义时都要出现
    既可以是异常说明符，也可以是运算符，判断其是否承诺了不会抛出异常

不完全类型
    声明但未定义的类型
    可以定义指向不完全类型的指针和引用，也可以声明但不能定义以不完全类型作为参数或返回值的函数
    类的成员类型不允许是它自身，类允许包含指向自身类型的指针和引用

进程退出
    exit - “正常”退出进程，进程退出前会调用atexit和on_exit注册的函数
    abort - “异常”退出进程，进程发出POSIX Signal SIGABRT，退出前会调用注册的信号处理函数
    terminate - 程序抛出的异常没有被捕获而终止，会调用通过std::set_terminate注册的函数，通常就是std::abort，因此一般情况下terminate==abort
